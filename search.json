[{"path":"https://erblast.github.io/easyalluvial/articles/data_exploration.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data Exploration with Alluvial Plots","text":"Alluvial plots form sankey diagrams great tool exploring categorical data. group categorical data flows can easily traced diagram. sankey diagrams constrained x-y dimensions, however graphical grammar bit complex regular x-y plot. ggalluvial package made great job translating grammar ggplot2 syntax gives many option tweak appearance plot, nevertheless still remains multilayered complexity makes difficult use ggalluvial explorative data analysis. easyalluvial provides simple interface package allows put decent alluvial dataframe data stored either long wide format automatically binning continuous data. meant allow quick visualisation entire dataframes similar visualisations created tabplot package providing different colouring options give flexibility needed data exploration.","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/articles/data_exploration.html","id":"sample-data","dir":"Articles","previous_headings":"Wide Format","what":"Sample data","title":"Data Exploration with Alluvial Plots","text":"","code":"suppressPackageStartupMessages( require(easyalluvial) ) suppressPackageStartupMessages( require(tibble) ) suppressPackageStartupMessages( require(dplyr) ) suppressPackageStartupMessages( require(ggplot2) ) suppressPackageStartupMessages( require(forcats) ) suppressPackageStartupMessages( require(purrr) ) data_wide = as_tibble(mtcars) categoricals = c('cyl', 'vs', 'am', 'gear', 'carb') numericals = c('mpg', 'cyl', 'disp', 'hp', 'drat', 'wt', 'qsec')  data_wide = data_wide %>%   mutate_at( vars(categoricals), as.factor ) %>%   mutate( car_id = row_number() )  knitr::kable( head(data_wide) )"},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/articles/data_exploration.html","id":"binning-of-numerical-variables","dir":"Articles","previous_headings":"Wide Format > alluvial_wide()","what":"Binning of Numerical Variables","title":"Data Exploration with Alluvial Plots","text":"function produces simple alluvial plot given dataframe. Numerical variables centered, scaled yeo johnson transformed (transformed resemble normal distribution) easyalluvial::manip_bin_numerics(). Outliers defined boxplot criteria ( see documentation grDevices::boxplot.stats()) stunted min max values defined whiskers box plot. transformed numeric variables cut 5 (default) equally ranged bins labeled ‘LL’ (low-low), ‘ML’ (medium-low), ‘M’ (medium), ‘MH’ (medium-high), HH (high-high) default.","code":"alluvial_wide(data_wide               , bins = 5 # Default               , bin_labels = c('LL','ML','M','MH','HH') # Default               , fill_by = 'all_flows'               )"},{"path":"https://erblast.github.io/easyalluvial/articles/data_exploration.html","id":"alluvial-plot-organisation","dir":"Articles","previous_headings":"Wide Format > alluvial_wide()","what":"Alluvial Plot Organisation","title":"Data Exploration with Alluvial Plots","text":"group stacked bars represents variable size segment represents many observations dataframe belong level matching segment label. colored flows bar stack represent group observations match value variable indicated flow. thickness flow indicates many observations belong group. see flow less thickness statistical information plot caption tells us 30 flows total 32 observations dataframe. means almost observation unique combination variable values.","code":""},{"path":"https://erblast.github.io/easyalluvial/articles/data_exploration.html","id":"reduce-the-number-of-variables","dir":"Articles","previous_headings":"Wide Format > alluvial_wide()","what":"Reduce the Number of Variables","title":"Data Exploration with Alluvial Plots","text":"order reduce complexity can use helper function plot_condensation() get idea variables want include alluvial plot. Lets say especially interested mpg (miles per gallon) variable relates variables. plot_condensation look variables can combine mpg trying condense data frame minimum.  general want condense dataframe 50% less might get meaningful alluvial looking mpg, cyl, vs, order.","code":"plot_condensation(data_wide, first = mpg) alluvial_wide( select(data_wide, mpg, cyl, vs, am), fill_by = 'first_variable' )"},{"path":"https://erblast.github.io/easyalluvial/articles/data_exploration.html","id":"reorder-levels","dir":"Articles","previous_headings":"Wide Format > alluvial_wide()","what":"Reorder Levels","title":"Data Exploration with Alluvial Plots","text":"can see clear pattern flows now, especially now colored flows mpg variable. However flows unnecessarily criss-crossing. can improve changing order levels cyl variable.  levels several variables levels name order individually per variable, design choice (see documentation alluvial_wide() ). want reorder need assign individual level names first.","code":"alluvial_wide( select(data_wide, mpg, cyl, vs, am)                , fill_by = 'first_variable'                , order_levels = c('8','6','4') ) p_unordered = alluvial_wide( select(data_wide, mpg, disp, hp)                               , fill_by = 'first_variable' ) +   labs( title = 'Unordered', caption = '\\n\\n' )  bin_labels = c('mpg_LL','mpg_LM','mpg_M','mpg_MH','mpg_HH')  p_ordered = data_wide %>%   mutate( mpg = manip_bin_numerics(mpg, bin_labels = bin_labels)           , mpg = fct_rev(mpg) ) %>%   select( mpg, disp, hp) %>%   alluvial_wide() +   labs( title = 'Ordered')  gridExtra::grid.arrange( p_unordered, p_ordered, nrow = 1 )"},{"path":"https://erblast.github.io/easyalluvial/articles/data_exploration.html","id":"long-format","dir":"Articles","previous_headings":"","what":"Long Format","title":"Data Exploration with Alluvial Plots","text":"certain cases might want start dataframe already long format, mostly case time-series data want track categorical value different time periods.","code":""},{"path":"https://erblast.github.io/easyalluvial/articles/data_exploration.html","id":"sample-data-1","dir":"Articles","previous_headings":"Long Format","what":"Sample Data","title":"Data Exploration with Alluvial Plots","text":"","code":"monthly_flights = nycflights13::flights %>%   group_by(month, tailnum, origin, dest, carrier) %>%   summarise() %>%   group_by( tailnum, origin, dest, carrier) %>%   count() %>%   filter( n == 12 ) %>%   select( - n ) %>%   left_join( nycflights13::flights ) %>%   .[complete.cases(.), ] %>%   ungroup() %>%   mutate( flight_id = pmap_chr(list(tailnum, origin, dest, carrier), paste )           , qu = cut(month, 4)) %>%   group_by(flight_id, carrier, origin, dest, qu ) %>%   summarise( mean_arr_delay = mean(arr_delay) ) %>%   ungroup() %>%   mutate( mean_arr_delay = ifelse( mean_arr_delay < 10, 'on_time', 'late' ) ) ## `summarise()` has grouped output by 'month', 'tailnum', 'origin', 'dest'. You ## can override using the `.groups` argument. ## Joining with `by = join_by(tailnum, origin, dest, carrier)` ## `summarise()` has grouped output by 'flight_id', 'carrier', 'origin', 'dest'. ## You can override using the `.groups` argument. levels(monthly_flights$qu) = c('Q1', 'Q2', 'Q3', 'Q4')    data_long = monthly_flights     knitr::kable( head( data_long) )"},{"path":"https://erblast.github.io/easyalluvial/articles/data_exploration.html","id":"alluvial_long","dir":"Articles","previous_headings":"Long Format","what":"alluvial_long()","title":"Data Exploration with Alluvial Plots","text":"long format need column contains keys (timepoints, Q1, Q2, Q3, Q4) values (late, ontime), also need column ID (flight_id) long format data one flight spread 4 rows function needs know IDs group put flow. implicitly missing data one flight_id less case four rows data (one timepoint) made explicit labeled 'NA'.  might interested airline carrier late flights, can add additional variable plot use coloring. can place variable either left right.","code":"col_vector = c('tomato', 'green3')  alluvial_long(data_long               , key = qu               , value = mean_arr_delay               , id = flight_id                , fill_by = 'value'               , col_vector_flow = col_vector               , col_vector_value = col_vector               ) p_right = alluvial_long(data_long               , key = qu               , value = mean_arr_delay               , id = flight_id                , fill = carrier               , fill_by = 'last_variable'               , fill_right = T # Default               ) +   labs(title = 'Color fill variable placed to the right')   p_left = alluvial_long(data_long               , key = qu               , value = mean_arr_delay               , id = flight_id                , fill = carrier               , fill_by = 'last_variable'               , fill_right = F               ) +   labs(title = 'Color fill variable placed to the left'        , caption = '\\n\\n')   gridExtra::grid.arrange( p_left, p_right, nrow = 1)"},{"path":"https://erblast.github.io/easyalluvial/articles/data_exploration.html","id":"order-levels","dir":"Articles","previous_headings":"Long Format > alluvial_long()","what":"Order Levels","title":"Data Exploration with Alluvial Plots","text":"alluvial_long() takes three different order_levels_* arguments, one keys (x-axis) one values (y-axis) one fill variable. want demonstrate order carrier variable number flights.","code":"carriers_ordered_by_count = data_long %>%   group_by(carrier) %>%   count() %>%   arrange( n ) %>%   .[['carrier']]  alluvial_long(data_long               , key = qu               , value = mean_arr_delay               , id = flight_id                , fill = carrier               , fill_by = 'last_variable'               , order_levels_fill = carriers_ordered_by_count               , fill_right = F               ) +   labs(title = 'Carriers ordered by number of flights')"},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/articles/data_exploration.html","id":"missing-data","dir":"Articles","previous_headings":"General","what":"Missing Data","title":"Data Exploration with Alluvial Plots","text":"Explicitly implicitly missing data automatically labeled 'NA' added level. order level can changed like . automatically generate implicitly missing data sample fraction long format dataframe, every flight_id value (late, on_time) assigned time point (Q1, Q2, Q3, Q4). can replace 'NA' string.","code":"col_vector = c( 'tomato', 'grey', 'green3')  data_na = data_long %>%   select(flight_id, qu, mean_arr_delay) %>%   sample_frac(0.9)  alluvial_long(data_na               , key = qu               , value = mean_arr_delay               , id = flight_id               , fill_by = 'value'               , NA_label = 'None'               , col_vector_value = col_vector               , col_vector_flow = col_vector               ) +   labs(title = 'Implicit NA values')"},{"path":"https://erblast.github.io/easyalluvial/articles/data_exploration.html","id":"colors","dir":"Articles","previous_headings":"General","what":"Colors","title":"Data Exploration with Alluvial Plots","text":"alluvial_wide() alluvial_long take sequence either HEX code string color values. easyalluvial offers convenience functions around constructing qualitative color palettes distinct values.","code":"palette_qualitative() %>%   palette_filter(greys = F) %>%   palette_plot_rgp()"},{"path":"https://erblast.github.io/easyalluvial/articles/data_exploration.html","id":"connect-flows-to-observations-in-original-data","dir":"Articles","previous_headings":"General","what":"Connect Flows to observations in original data","title":"Data Exploration with Alluvial Plots","text":"might recognise interesting patterns alluvial plot want follow upon. example cars medium-low mpg 8 cyl 0 vs value 1. Note passing car_id variable.  plot objects returned functions attribute called data_key x-y table arranged like alluvial plot one column containing original ID. can use car_id variable rejoin original dataframe.","code":"p = alluvial_wide( select(data_wide, mpg, cyl, vs, am, car_id)                    , id = car_id                    , fill_by = 'first_variable'                    , order_levels = c('8','6','4') )  p attr(p, \"data_key\") %>%   filter( mpg == 'ML'           , cyl == 8           , vs == 0            , am == 1 ) %>%   # in order to convert factors to integers we have to convert them   # to character first. Converting from factor returns the order of   # the factor instead.   mutate( car_id = as.character(car_id)           , car_id = as.integer(car_id) ) %>%   left_join(data_wide, by = 'car_id') %>%   knitr::kable()"},{"path":"https://erblast.github.io/easyalluvial/articles/data_exploration.html","id":"ggplot2-manipulations","dir":"Articles","previous_headings":"General","what":"ggplot2 manipulations","title":"Data Exploration with Alluvial Plots","text":"thanks ggalluvial alluvial plots easyalluvial returns can manipulated using ggplot2 syntax","code":"p +    coord_flip() +   theme_minimal() +   ggtitle('look at my minimal flip')"},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/articles/model_response.html","id":"taking-a-peek","dir":"Articles","previous_headings":"Introduction","what":"Taking a peek","title":"Partial Dependence Alluvial Plots - Visualising Model Response","text":"building machine learning models usually faced trade-performance interpretability. However lot model agnostic interpretation techniques can applied even black box models. good overview can found Interpretable Machine Learning Christoph Molnar. intuitive interpretation techniques visualize model predictions response different data input. try visualise model behaves possible data space, discussed -depth paper. simplest data space changes one input dimension, meaning sequence range variable keeping others constant value. can plot model predictions values variable stepped . Similarly can create two dimensional data space ste range 2 variables. add third dimension two resulting plot.","code":""},{"path":"https://erblast.github.io/easyalluvial/articles/model_response.html","id":"partial-dependence-plots","dir":"Articles","previous_headings":"Introduction","what":"Partial Dependence Plots","title":"Partial Dependence Alluvial Plots - Visualising Model Response","text":"Partial Dependence Plots little bit sophisticated. Instead setting unaffected predictor variables constant uses values training data set returns averaged predictions rows training data set. Packages creating partial dependence plots : - plotmo - pdp","code":""},{"path":"https://erblast.github.io/easyalluvial/articles/model_response.html","id":"partial-dependence-alluvial-plots","dir":"Articles","previous_headings":"Introduction","what":"Partial Dependence Alluvial Plots","title":"Partial Dependence Alluvial Plots - Visualising Model Response","text":"Alluvial Plots can plot three dimensions side side. practice can plot partial dependence plots 4 dimension. limitation limit number flows plot can use 5 steps range predictor variables want add plot.","code":"data('BostonHousing') df <- as_tibble( BostonHousing )  library(future) future::plan(\"multisession\")  m <- parsnip::rand_forest(mode = \"regression\") %>%   parsnip::set_engine(\"randomForest\") %>%   parsnip::fit(lstat ~., df)   p <- alluvial_model_response_parsnip(m, df, degree = 4, bins = 5,                                     stratum_label_size = 2.8,                                     method = \"pdp\", parallel = TRUE) p_grid <- p %>%   add_marginal_histograms(data_input = df, plot = FALSE) %>%   add_imp_plot(p = p, data_input = df)"},{"path":"https://erblast.github.io/easyalluvial/articles/model_response.html","id":"interactive-partial-dependence-plot-with-parcats","dir":"Articles","previous_headings":"Introduction","what":"Interactive Partial Dependence Plot with {parcats}","title":"Partial Dependence Alluvial Plots - Visualising Model Response","text":"","code":"# parcats::parcats(p, data_input = df)"},{"path":"https://erblast.github.io/easyalluvial/articles/model_response.html","id":"caret-wrapper","dir":"Articles","previous_headings":"Introduction","what":"Caret Wrapper","title":"Partial Dependence Alluvial Plots - Visualising Model Response","text":"","code":"train = caret::train( lstat ~ .                      , df                      , method = 'rf'                      , trControl = caret::trainControl( method = 'none' )                      , importance = TRUE )  alluvial_model_response_caret(train, df, degree = 4, bins = 5                               , stratum_label_size = 2.8)"},{"path":"https://erblast.github.io/easyalluvial/articles/model_response.html","id":"step-by-step-build-your-own-wrappers","dir":"Articles","previous_headings":"Introduction","what":"Step By Step (build your own wrappers)","title":"Partial Dependence Alluvial Plots - Visualising Model Response","text":"start creating model looking importance features generating data space screen infinite amount values per variable limit fixed number. want create possible combinations values determines number flows. visual limit flows alluvial plot somewhere around 1000 flows. Thus recommend go 5 values result 5 x 5 X 5 X 5 –> 625 combinations number flows. also leaves wiggeling room one top 4 variables factor 5 levels. get_data_space() split range variable 3 pick median split add variable minimum maximum set. Total rows dspace: 625","code":"data('BostonHousing') df = as_tibble( BostonHousing ) m = randomForest( lstat ~ ., df ) imp = m$importance %>%   tidy_imp(df) #   knitr::kable(imp) dspace = get_data_space(df, imp                         , degree = 4 # specifies the number of variables                         , bins = 5 # the number of values per variable                         )  knitr::kable( head(dspace, 10) ) dspace %>%   summarise_all( ~ length( unique(.) ) ) %>%   knitr::kable()"},{"path":"https://erblast.github.io/easyalluvial/articles/model_response.html","id":"generating-model-response","dir":"Articles","previous_headings":"Introduction","what":"Generating model response","title":"Partial Dependence Alluvial Plots - Visualising Model Response","text":"","code":"pred = predict(m, newdata = dspace)"},{"path":"https://erblast.github.io/easyalluvial/articles/model_response.html","id":"plotting","dir":"Articles","previous_headings":"Introduction","what":"Plotting","title":"Partial Dependence Alluvial Plots - Visualising Model Response","text":"predictions binned well 5 bins. Binning options can passed list via params_bin_numeric_pred parameter.  can see binned range predictions explore variable combination created tracing coloured flows. stratum labels prediction variables indicate value variable fraction flows colour (prediction variable bin range) pass stratum.","code":"p = alluvial_model_response(pred, dspace, imp                             , degree = 4, bins = 5                             , stratum_label_size = 2.8 ) p"},{"path":"https://erblast.github.io/easyalluvial/articles/model_response.html","id":"marginal-histograms","dir":"Articles","previous_headings":"Introduction","what":"Marginal histograms","title":"Partial Dependence Alluvial Plots - Visualising Model Response","text":"well easyalluvial plots can add marginal histograms bonus also feature importance.  can see original distribution variables, lines indicate position values picked get_data_space(). comparing distribution predictions original distribution lstat see range predictions response artificial dataspace cover range lstat. likely means possible combinations 4 plotted variables combination moderate values predictors give extreme values. can explore, first need check whether model capable making predictions lower upper ranges lsat. can use plot_hist() plot distributions add prediction training data set using pred_train parameter.  see training prediction also completely cover lstat range predictions artificial data space. wanted emphasize can bin data space predictions basis training predictions. case makes sense increase number bins predictions order loose resolution plot.","code":"p_grid = add_marginal_histograms(p, data_input = df                                  , plot = F # plot only after adding feature importance                                  , scale = 50 # to increase distance between ridge plots, Default: 400                                  ) %>%   add_imp_plot( p = p, data_input = df) pred_train = predict(m)  plot_hist('pred', p, df           , pred_train = pred_train # pred_train can also be passed to add_marginal_histograms()           , scale = 50) p = alluvial_model_response(pred, dspace, imp, degree = 4                             , bin_labels = c(\"LLL\",\"LL\", \"ML\", \"M\", \"MH\", \"HH\", \"HHH\")                             , params_bin_numeric_pred = list(bins = 7)                             , pred_train = pred_train                             , stratum_label_size = 2.8 ) ## Warning in .f(.x[[i]], ...): bins (25.2,32.7] of pred are empty ## Warning in alluvial_model_response(pred, dspace, imp, degree = 4, bin_labels = ## c(\"LLL\", : binned predictions have only 6 bins, which is less bins than ## 'bin_labels' plot_hist('pred', p, df, scale = 50) p_grid = add_marginal_histograms(p, data_input = df                                  , plot = F # plot only after adding feature importance                                  , scale = 50 # to increase distance between ridge plots, Default: 400                                  ) %>%   add_imp_plot( p = p, data_input = df)"},{"path":"https://erblast.github.io/easyalluvial/articles/model_response.html","id":"what-feature-combinations-are-needed-to-obtain-predictions-in-the-lower-and-higher-ranges-of-lstat","dir":"Articles","previous_headings":"","what":"What feature combinations are needed to obtain predictions in the lower and higher ranges of lstat?","title":"Partial Dependence Alluvial Plots - Visualising Model Response","text":"can add training predictions training data assign variables covered model response plot bins. can create alluvial plot entire training dataframe order trace lstat ranges covered model response alluvial plot . Since interested observations remove flows plot setting color NA.  can see upper ranges lstat pretty specific combination values required 8 feature variables medv tax begin flows scatter entire range following variables. lower range values lstat start scatter crim dis. Interestingly seems set houses branches houses lower range lstat predictions already third feature, age. potentially explore , reminder can get binned input data alluvial plot calling attr(p, \"data_key\") trace variables interest.","code":"breaks = c( min(pred_train) - 1,min(pred),max(pred),max(pred_train) + 1 )  df_inv = df %>%   select(-lstat) %>%   mutate( pred_train = pred_train           , pred_train = cut(pred_train, breaks) ) %>%   select( pred_train, one_of(imp$vars) ) # order by feature importance  p = alluvial_wide(df_inv, bin_labels = 'min_max'                   , stratum_label_size = 3                   , col_vector_flow = c('blue', NA, 'orange')                   , colorful_fill_variable_stratum = F) ## Warning in .f(.x[[i]], ...): bins (-0.668,-0.379],(-0.379,-0.0886] of zn are ## empty p_grid = add_marginal_histograms(p, df_inv)"},{"path":"https://erblast.github.io/easyalluvial/articles/model_response.html","id":"advantages","dir":"Articles","previous_headings":"","what":"Advantages","title":"Partial Dependence Alluvial Plots - Visualising Model Response","text":"Model response alluvial plots can help us get immediate intuitive understanding predictions certain range can generated model. can understood none-statistical stakeholders invite viewer start exploring question decision making process model also conveying appreciation model complexity flows branch variables lower feature importance.","code":""},{"path":"https://erblast.github.io/easyalluvial/articles/model_response.html","id":"none-regression-models","dir":"Articles","previous_headings":"Advantages","what":"None-regression models","title":"Partial Dependence Alluvial Plots - Visualising Model Response","text":"Works way.","code":"df = select(mtcars2, -ids) m = randomForest::randomForest( am ~ ., df) imp = m$importance dspace = get_data_space(df, imp, degree = 3)  pred = predict(m, newdata = dspace,type = 'response') p = alluvial_model_response(pred, dspace, imp, degree = 3) p"},{"path":"https://erblast.github.io/easyalluvial/articles/model_response.html","id":"limitations","dir":"Articles","previous_headings":"Advantages","what":"Limitations","title":"Partial Dependence Alluvial Plots - Visualising Model Response","text":"loss information binning numerical variables combinations generated making grid might outside feature distribution space (generate combinations impossible) look combination 4 features disregard others alleviate can reduce complexity model reducing features (take correlating variables) use additional model exploration methods classical PDPs, ALE plots, Shapely values, etc, …","code":""},{"path":"https://erblast.github.io/easyalluvial/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bjoern Koneswarakantha. Author, maintainer.","code":""},{"path":"https://erblast.github.io/easyalluvial/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Koneswarakantha B (2025). easyalluvial: Generate Alluvial Plots Single Line Code. R package version 0.4.0, https://github.com/erblast/easyalluvial/.","code":"@Manual{,   title = {easyalluvial: Generate Alluvial Plots with a Single Line of Code},   author = {Bjoern Koneswarakantha},   year = {2025},   note = {R package version 0.4.0},   url = {https://github.com/erblast/easyalluvial/}, }"},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"easyalluvial-","dir":"","previous_headings":"","what":"Generate Alluvial Plots with a Single Line of Code","title":"Generate Alluvial Plots with a Single Line of Code","text":"Alluvial plots similar sankey diagrams visualise categorical data multiple dimensions flows. Rosval et. al. 2010 graphical grammar however bit complex regular x/y plots. ggalluvial package made great job translating grammar ggplot2 syntax gives many option tweak appearance alluvial plot, however still remains multi-layered complexity makes difficult use ‘ggalluvial’ explorative data analysis. ‘easyalluvial’ provides simple interface package allows produce decent alluvial plot dataframe either long wide format single line code also handling continuous data. meant allow quick visualisation entire dataframes focus different colouring options can make alluvial plots great tool data exploration.","code":""},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Generate Alluvial Plots with a Single Line of Code","text":"plot alluvial graph single line code given dataframe support wide long data format (wiki, wide vs. long/narrow data) automatically transforms numerical categorical data helper functions variable selection convenient parameters coloring ordering marginal histograms model agnostic partial dependence model response alluvial plots 4 dimensions interactive plots easyalluvial parcats","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"cran","dir":"","previous_headings":"Installation","what":"CRAN","title":"Generate Alluvial Plots with a Single Line of Code","text":"","code":"install.packages('easyalluvial')"},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development Version","title":"Generate Alluvial Plots with a Single Line of Code","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"erblast/easyalluvial\")"},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Generate Alluvial Plots with a Single Line of Code","text":"Data Exploration Alluvial Plots Visualising Model Response Interactive Plots parcats","code":""},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Generate Alluvial Plots with a Single Line of Code","text":"","code":"suppressPackageStartupMessages( require(tidyverse) ) suppressPackageStartupMessages( require(easyalluvial) )"},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"sample-data","dir":"","previous_headings":"Examples > Alluvial from data in wide format","what":"Sample Data","title":"Generate Alluvial Plots with a Single Line of Code","text":"","code":"knitr::kable( head(mtcars2) )"},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"plot","dir":"","previous_headings":"Examples > Alluvial from data in wide format","what":"Plot","title":"Generate Alluvial Plots with a Single Line of Code","text":"Continuous Variables automatically binned follows. High, High (HH) Medium, High (MH) Medium (M) Medium, Low (ML) Low, Low (LL)","code":"alluvial_wide( data = mtcars2                 , max_variables = 5                 , fill_by = 'first_variable' )"},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"sample-data-1","dir":"","previous_headings":"Examples > Alluvial from data in long format","what":"Sample Data","title":"Generate Alluvial Plots with a Single Line of Code","text":"","code":"knitr::kable( head(quarterly_flights) )"},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"plot-1","dir":"","previous_headings":"Examples > Alluvial from data in long format","what":"Plot","title":"Generate Alluvial Plots with a Single Line of Code","text":"","code":"alluvial_long( quarterly_flights                , key = qu                , value = mean_arr_delay                , id = tailnum                , fill = carrier )"},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"marginal-histograms","dir":"","previous_headings":"Examples","what":"Marginal Histograms","title":"Generate Alluvial Plots with a Single Line of Code","text":"","code":"alluvial_wide( data = mtcars2                 , max_variables = 5                 , fill_by = 'first_variable' ) %>%   add_marginal_histograms(mtcars2)"},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"interactive-graphs","dir":"","previous_headings":"Examples","what":"Interactive Graphs","title":"Generate Alluvial Plots with a Single Line of Code","text":"demo Live Widget","code":"suppressPackageStartupMessages( require(parcats) )  p = alluvial_wide(mtcars2, max_variables = 5)  parcats(p, marginal_histograms = TRUE, data_input = mtcars2)"},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"partial-dependence-alluvial-plots","dir":"","previous_headings":"Examples","what":"Partial Dependence Alluvial Plots","title":"Generate Alluvial Plots with a Single Line of Code","text":"Alluvial plots capable displaying higher dimensional data plane, thus lend plot response statistical model changes input data across multiple dimensions. practical limit 4 dimensions conventional partial dependence plots limited 2 dimensions. Briefly 4 variables highest feature importance given model selected 5 values spread variable range selected . grid possible combinations created. none-plotted variables set values found first row training data set. Using artificial data space model predictions generated. process repeated row training data set overall model response averaged end. possible combinations plotted flow coloured bin corresponding average model response generated particular combination. partial dependence plots (ebook) Tutorial easyalluvial contains wrappers parsnip caret models. Custom Wrappers models can easily created.","code":"df = select(mtcars2, -ids)  m = parsnip::rand_forest(mode = \"regression\") %>%   parsnip::set_engine(\"randomForest\") %>%   parsnip::fit(disp ~ ., df)  p = alluvial_model_response_parsnip(m, df, degree = 4, method = \"pdp\") #> Getting partial dependence plot preditions. This can take a while. See easyalluvial::get_pdp_predictions() `Details` on how to use multiprocessing  p_grid = add_marginal_histograms(p, df, plot = F) %>%   add_imp_plot(p, df)"},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"interactive-partial-dependence-plot","dir":"","previous_headings":"Examples","what":"Interactive Partial Dependence Plot","title":"Generate Alluvial Plots with a Single Line of Code","text":"- Live Widget","code":"parcats(p, marginal_histograms = TRUE, imp = TRUE, data_input = df)"},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"clinicopath-jamovi-module","dir":"","previous_headings":"","what":"ClinicoPath {jamovi} Module","title":"Generate Alluvial Plots with a Single Line of Code","text":"ClinicoPath jamovi Module (thanks Serdar Balci) adds easyalluvial plots jamovia spreadsheet interface statistics R.","code":""},{"path":"https://erblast.github.io/easyalluvial/index.html","id":"similar-packages","dir":"","previous_headings":"","what":"Similar Packages","title":"Generate Alluvial Plots with a Single Line of Code","text":"ggalluvial alluvial networkD3 ggbump","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/add_imp_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"add bar plot of important features to model response alluvial plot — add_imp_plot","title":"add bar plot of important features to model response alluvial plot — add_imp_plot","text":"adds bar plot important features model response alluvial plot","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/add_imp_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add bar plot of important features to model response alluvial plot — add_imp_plot","text":"","code":"add_imp_plot(grid, p = NULL, data_input, plot = T, ...)"},{"path":"https://erblast.github.io/easyalluvial/reference/add_imp_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add bar plot of important features to model response alluvial plot — add_imp_plot","text":"grid gtable ggplot p alluvial plot, optional alluvial plot already passed grid.  Default: NULL data_input dataframe used generate alluvial plot plot logical plot drawn ... additional parameters passed plot_imp","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/add_imp_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add bar plot of important features to model response alluvial plot — add_imp_plot","text":"gtable","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/add_imp_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add bar plot of important features to model response alluvial plot — add_imp_plot","text":"","code":"if (FALSE) { # \\dontrun{ df = mtcars2[, ! names(mtcars2) %in% 'ids' ]  train = caret::train( disp ~ .                      , df                      , method = 'rf'                      , trControl = caret::trainControl( method = 'none' )                      , importance = TRUE )  pred_train = caret::predict.train(train, df)  p = alluvial_model_response_caret(train, degree = 4, pred_train = pred_train)  p_grid = add_marginal_histograms(p, data_input = df)  p_grid = add_imp_plot(p_grid, p, data_input = df) } # }"},{"path":"https://erblast.github.io/easyalluvial/reference/add_marginal_histograms.html","id":null,"dir":"Reference","previous_headings":"","what":"add marginal histograms to alluvial plot — add_marginal_histograms","title":"add marginal histograms to alluvial plot — add_marginal_histograms","text":"add density histograms frequency plots original data  alluvial plot","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/add_marginal_histograms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add marginal histograms to alluvial plot — add_marginal_histograms","text":"","code":"add_marginal_histograms(   p,   data_input,   top = TRUE,   keep_labels = FALSE,   plot = TRUE,   ... )"},{"path":"https://erblast.github.io/easyalluvial/reference/add_marginal_histograms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add marginal histograms to alluvial plot — add_marginal_histograms","text":"p alluvial plot data_input dataframe, input data used create dataframe top logical, position histograms, FALSE adds bottom, Default: TRUE keep_labels logical, keep title caption, Default: FALSE plot logical plot drawn ... additional arguments model response alluvial plot concerning response variable pred_train display training prediction, necessary pred_train already passed alluvial_model_response() scale int, y-axis distance ridge plots, Default: 400 resp_var character vector, specify response variable data_input, set response variable try inferred, Default: NULL","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/add_marginal_histograms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add marginal histograms to alluvial plot — add_marginal_histograms","text":"gtable","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/add_marginal_histograms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add marginal histograms to alluvial plot — add_marginal_histograms","text":"","code":"if (FALSE) { # \\dontrun{ p = alluvial_wide(mtcars2, max_variables = 3) p_grid = add_marginal_histograms(p, mtcars2) } # }"},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_long.html","id":null,"dir":"Reference","previous_headings":"","what":"alluvial plot of data in long format — alluvial_long","title":"alluvial plot of data in long format — alluvial_long","text":"Plots two variables dataframe alluvial plot. third  variable can added either left right alluvial plot  provide coloring flows. numerical variables scaled,  centered YeoJohnson transformed binning.","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"alluvial plot of data in long format — alluvial_long","text":"","code":"alluvial_long(   data,   key,   value,   id,   fill = NULL,   fill_right = T,   bins = 5,   bin_labels = c(\"LL\", \"ML\", \"M\", \"MH\", \"HH\"),   NA_label = \"NA\",   order_levels_value = NULL,   order_levels_key = NULL,   order_levels_fill = NULL,   complete = TRUE,   fill_by = \"first_variable\",   col_vector_flow = palette_qualitative() %>% palette_filter(greys = F),   col_vector_value = RColorBrewer::brewer.pal(9, \"Greys\")[c(3, 6, 4, 7, 5)],   verbose = F,   stratum_labels = T,   stratum_label_type = \"label\",   stratum_label_size = 4.5,   stratum_width = 1/4,   auto_rotate_xlabs = T,   ... )"},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"alluvial plot of data in long format — alluvial_long","text":"data dataframe key unquoted column name string x axis variable value unquoted column name string y axis variable id unquoted column name string id column fill unquoted column name string fill variable used color flows, Default: NULL fill_right logical, TRUE fill variable added right FALSE left, Default: T bins number bins automatic binning numerical variables, Default: 5 bin_labels labels bins, Default: c(\"LL\", \"ML\", \"M\", \"MH\", \"HH\") NA_label character vector define label missing data order_levels_value character vector denoting order y levels low high, complete can also just used bring levels front, Default: NULL order_levels_key character vector denoting order x levels low high, complete can also just used bring levels front, Default: NULL order_levels_fill character vector denoting order color fill variable levels low high, complete can also just used bring levels front, Default: NULL complete logical, insert implicitly missing observations, Default: TRUE fill_by one_of(c('first_variable', 'last_variable', 'all_flows', 'values')), Default: 'first_variable' col_vector_flow HEX color values flows, Default: palette_filter( greys = F) col_vector_value HEX color values  y levels/values, Default:RColorBrewer::brewer.pal(9, 'Greys')[c(3,6,4,7,5)] verbose logical, print plot summary, Default: F stratum_labels logical, Default: TRUE stratum_label_type character, Default: \"label\" stratum_label_size numeric, Default: 4.5 stratum_width double, Default: 1/4 auto_rotate_xlabs logical, Default: TRUE ... additional parameter passed manip_bin_numerics","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"alluvial plot of data in long format — alluvial_long","text":"ggplot2 object","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"alluvial plot of data in long format — alluvial_long","text":"","code":"if (FALSE) { # \\dontrun{  data = quarterly_flights   alluvial_long( data, key = qu, value = mean_arr_delay, id = tailnum, fill_by = 'last_variable' )   # more flow coloring variants ------------------------------------   alluvial_long( data, key = qu, value = mean_arr_delay, id = tailnum, fill_by = 'first_variable' )  alluvial_long( data, key = qu, value = mean_arr_delay, id = tailnum, fill_by = 'all_flows' )  alluvial_long( data, key = qu, value = mean_arr_delay, id = tailnum, fill_by = 'value' )   # color by additional variable carrier ---------------------------   alluvial_long( data, key = qu, value = mean_arr_delay, fill = carrier, id = tailnum )   # use same color coding for flows and y levels -------------------   palette = c('green3', 'tomato')   alluvial_long( data, qu, mean_arr_delay, tailnum, fill_by = 'value'                 , col_vector_flow = palette                 , col_vector_value = palette )    # reorder levels ------------------------------------------------   alluvial_long( data, qu, mean_arr_delay, tailnum, fill_by = 'first_variable'                , order_levels_value = c('on_time', 'late') )   alluvial_long( data, qu, mean_arr_delay, tailnum, fill_by = 'first_variable'                , order_levels_key = c('Q4', 'Q3', 'Q2', 'Q1') )  require(dplyr) require(magrittr)   order_by_carrier_size = data %>%    group_by(carrier) %>%    count() %>%    arrange( desc(n) ) %>%    .[['carrier']]   alluvial_long( data, qu, mean_arr_delay, tailnum, carrier                 , order_levels_fill = order_by_carrier_size )  } # }"},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response.html","id":null,"dir":"Reference","previous_headings":"","what":"create model response plot — alluvial_model_response","title":"create model response plot — alluvial_model_response","text":"alluvial plots capable displaying higher dimensional data  plane, thus lend plot response statistical model  changes input data across multiple dimensions. practical limit  4 dimensions. need data space (sensible range data  calculated based importance explanatory variables model  created get_data_space predictions  returned model response data space.","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create model response plot — alluvial_model_response","text":"","code":"alluvial_model_response(   pred,   dspace,   imp,   degree = 4,   bin_labels = c(\"LL\", \"ML\", \"M\", \"MH\", \"HH\"),   col_vector_flow = c(\"#FF0065\", \"#009850\", \"#A56F2B\", \"#005EAA\", \"#710500\", \"#7B5380\",     \"#9DD1D1\"),   method = \"median\",   force = FALSE,   params_bin_numeric_pred = list(bins = 5),   pred_train = NULL,   stratum_label_size = 3.5,   ... )"},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create model response plot — alluvial_model_response","text":"pred vector, predictions, method = 'pdp' use get_pdp_predictions calculate predictions dspace data frame, returned get_data_space imp dataframe, two columns one numeric containing importance measures one character factor column containing corresponding variable names found training data. degree integer,  number top important variables select. plotting 4 result two many flows alluvial plot readable, Default: 4 bin_labels labels prediction bins low high, Default: c(\"LL\", \"ML\", \"M\", \"MH\", \"HH\") col_vector_flow, character vector, defines flow colours, Default: c('#FF0065','#009850', '#A56F2B', '#005EAA', '#710500') method, character vector, one c('median', 'pdp') median sets variables displayed median mode, use regular predictions pdp partial dependency plot method, observation training data displayed variable set indicated values. predict function called modified observation result averaged, calculate predictions using get_pdp_predictions . Default: 'median' force logical, force plotting 1500 flows, Default: FALSE params_bin_numeric_pred list, additional parameters passed manip_bin_numerics applied pred parameter. Default: list( bins = 5, center = T, transform = T, scale = T) pred_train numeric vector, base automated binning pred vector distribution training predictions. useful marginal histograms added plot later. Default = NULL stratum_label_size numeric, Default: 3.5 ... additional parameters passed alluvial_wide","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create model response plot — alluvial_model_response","text":"ggplot2 object","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"create model response plot — alluvial_model_response","text":"model visualisation approach follows \"visualising model  dataspace\" principle described Wickham H, Cook D, Hofmann H  (2015) Visualizing statistical models: Removing blindfold. Statistical  Analysis Data Mining 8(4) <doi:10.1002/sam.11271>","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create model response plot — alluvial_model_response","text":"","code":"df = mtcars2[, ! names(mtcars2) %in% 'ids' ] m = randomForest::randomForest( disp ~ ., df) imp = m$importance dspace = get_data_space(df, imp, degree = 3) pred = predict(m, newdata = dspace) alluvial_model_response(pred, dspace, imp, degree = 3)   # partial dependency plotting method if (FALSE) { # \\dontrun{  pred = get_pdp_predictions(df, imp                             , .f_predict = randomForest:::predict.randomForest                             , m                             , degree = 3                             , bins = 5)    alluvial_model_response(pred, dspace, imp, degree = 3, method = 'pdp')  } # }"},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response_caret.html","id":null,"dir":"Reference","previous_headings":"","what":"create model response plot for caret models — alluvial_model_response_caret","title":"create model response plot for caret models — alluvial_model_response_caret","text":"Wraps alluvial_model_response  get_data_space one call caret models.","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response_caret.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create model response plot for caret models — alluvial_model_response_caret","text":"","code":"alluvial_model_response_caret(   train,   data_input,   degree = 4,   bins = 5,   bin_labels = c(\"LL\", \"ML\", \"M\", \"MH\", \"HH\"),   col_vector_flow = c(\"#FF0065\", \"#009850\", \"#A56F2B\", \"#005EAA\", \"#710500\", \"#7B5380\",     \"#9DD1D1\"),   method = \"median\",   parallel = FALSE,   params_bin_numeric_pred = list(bins = 5),   pred_train = NULL,   stratum_label_size = 3.5,   force = F,   resp_var = NULL,   ... )"},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response_caret.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create model response plot for caret models — alluvial_model_response_caret","text":"train caret train object data_input dataframe, input data degree integer,  number top important variables select. plotting 4 result two many flows alluvial plot readable, Default: 4 bins integer, number bins numeric variables, increasing number might result many flows, Default: 5 bin_labels labels bins low high, Default: c(\"LL\", \"ML\", \"M\", \"MH\", \"HH\") col_vector_flow, character vector, defines flow colours, Default: c('#FF0065','#009850', '#A56F2B', '#005EAA', '#710500') method, character vector, one c('median', 'pdp') median sets variables displayed median mode, use regular predictions pdp partial dependency plot method, observation training data displayed variables set indicated values. predict function called modified observation result averaged . Default: 'median' parallel logical, turn parallel processing pdp method. Default: FALSE params_bin_numeric_pred list, additional parameters passed manip_bin_numerics applied pred parameter. Default: list(bins = 5, center = T, transform = T, scale = T) pred_train numeric vector, base automated binning pred vector distribution training predictions. useful marginal histograms added plot later. Default = NULL stratum_label_size numeric, Default: 3.5 force logical, force plotting 1500 flows, Default: FALSE resp_var character, sometimes target variable inferred needs passed. Default NULL ... additional parameters passed alluvial_wide","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response_caret.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create model response plot for caret models — alluvial_model_response_caret","text":"ggplot2 object","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response_caret.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"create model response plot for caret models — alluvial_model_response_caret","text":"model visualisation approach follows \"visualising model  dataspace\" principle described Wickham H, Cook D, Hofmann H  (2015) Visualizing statistical models: Removing blindfold. Statistical  Analysis Data Mining 8(4) <doi:10.1002/sam.11271>","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response_caret.html","id":"parallel-processing","dir":"Reference","previous_headings":"","what":"Parallel Processing","title":"create model response plot for caret models — alluvial_model_response_caret","text":"using `furrr` `future` package paralelize  computational steps calculating predictions. user  register compatible backend (see plan).","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response_caret.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create model response plot for caret models — alluvial_model_response_caret","text":"","code":"if(check_pkg_installed(\"caret\", raise_error = FALSE)) {   df = mtcars2[, ! names(mtcars2) %in% 'ids' ]    train = caret::train( disp ~ .,                         df,                         method = 'rf',                         trControl = caret::trainControl( method = 'none' ),                         importance = TRUE )    alluvial_model_response_caret(train, df, degree = 3) }  # partial dependency plotting method if (FALSE) { # \\dontrun{ future::plan(\"multisession\") alluvial_model_response_caret(train, df, degree = 3, method = 'pdp', parallel = TRUE)  } # }"},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response_parsnip.html","id":null,"dir":"Reference","previous_headings":"","what":"create model response plot for parsnip models — alluvial_model_response_parsnip","title":"create model response plot for parsnip models — alluvial_model_response_parsnip","text":"Wraps alluvial_model_response  get_data_space one call parsnip models.","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response_parsnip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create model response plot for parsnip models — alluvial_model_response_parsnip","text":"","code":"alluvial_model_response_parsnip(   m,   data_input,   degree = 4,   bins = 5,   bin_labels = c(\"LL\", \"ML\", \"M\", \"MH\", \"HH\"),   col_vector_flow = c(\"#FF0065\", \"#009850\", \"#A56F2B\", \"#005EAA\", \"#710500\", \"#7B5380\",     \"#9DD1D1\"),   method = \"median\",   parallel = FALSE,   params_bin_numeric_pred = list(bins = 5),   pred_train = NULL,   stratum_label_size = 3.5,   force = F,   resp_var = NULL,   .f_imp = vip::vi_model,   ... )"},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response_parsnip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create model response plot for parsnip models — alluvial_model_response_parsnip","text":"m parsnip model trained workflow data_input dataframe, input data degree integer,  number top important variables select. plotting 4 result two many flows alluvial plot readable, Default: 4 bins integer, number bins numeric variables, increasing number might result many flows, Default: 5 bin_labels labels bins low high, Default: c(\"LL\", \"ML\", \"M\", \"MH\", \"HH\") col_vector_flow, character vector, defines flow colours, Default: c('#FF0065','#009850', '#A56F2B', '#005EAA', '#710500') method, character vector, one c('median', 'pdp') median sets variables displayed median mode, use regular predictions pdp partial dependency plot method, observation training data displayed variables set indicated values. predict function called modified observation result averaged . Default: 'median' parallel logical, turn parallel processing pdp method. Default: FALSE params_bin_numeric_pred list, additional parameters passed manip_bin_numerics applied pred parameter. Default: list(bins = 5, center = T, transform = T, scale = T) pred_train numeric vector, base automated binning pred vector distribution training predictions. useful marginal histograms added plot later. Default = NULL stratum_label_size numeric, Default: 3.5 force logical, force plotting 1500 flows, Default: FALSE resp_var character, sometimes target variable inferred needs passed. Default NULL .f_imp vip function calculates feature importance, Default: vip::vi_model ... additional parameters passed alluvial_wide","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response_parsnip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create model response plot for parsnip models — alluvial_model_response_parsnip","text":"ggplot2 object","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response_parsnip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"create model response plot for parsnip models — alluvial_model_response_parsnip","text":"model visualisation approach follows \"visualising model  dataspace\" principle described Wickham H, Cook D, Hofmann H  (2015) Visualizing statistical models: Removing blindfold. Statistical  Analysis Data Mining 8(4) <doi:10.1002/sam.11271>","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response_parsnip.html","id":"parallel-processing","dir":"Reference","previous_headings":"","what":"Parallel Processing","title":"create model response plot for parsnip models — alluvial_model_response_parsnip","text":"using `furrr` `future` package paralelize  computational steps calculating predictions. user  register compatible backend (see plan).","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_model_response_parsnip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create model response plot for parsnip models — alluvial_model_response_parsnip","text":"","code":"if(check_pkg_installed(\"parsnip\", raise_error = FALSE) &    check_pkg_installed(\"vip\", raise_error = FALSE)) {   df = mtcars2[, ! names(mtcars2) %in% 'ids' ]    m = parsnip::rand_forest(mode = \"regression\") %>%      parsnip::set_engine(\"randomForest\") %>%      parsnip::fit(disp ~ ., data = df)    alluvial_model_response_parsnip(m, df, degree = 3) }  if (FALSE) { # \\dontrun{ # workflow ---------------------------------  m <- parsnip::rand_forest(mode = \"regression\") %>%   parsnip::set_engine(\"randomForest\")  rec_prep = recipes::recipe(disp ~ ., df)   wf <- workflows::workflow() %>%   workflows::add_model(m) %>%   workflows::add_recipe(rec_prep) %>%   parsnip::fit(df)  alluvial_model_response_parsnip(wf, df, degree = 3)  # partial dependence plotting method ----- future::plan(\"multisession\") alluvial_model_response_parsnip(m, df, degree = 3, method = 'pdp', parallel = TRUE) } # }"},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"alluvial plot of data in wide format — alluvial_wide","title":"alluvial plot of data in wide format — alluvial_wide","text":"plots dataframe alluvial plot. numerical variables  scaled, centered YeoJohnson transformed binning. Plots  variables sequence appear dataframe maximum  number values reached.","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"alluvial plot of data in wide format — alluvial_wide","text":"","code":"alluvial_wide(   data,   id = NULL,   max_variables = 20,   bins = 5,   bin_labels = c(\"LL\", \"ML\", \"M\", \"MH\", \"HH\"),   NA_label = \"NA\",   order_levels = NULL,   fill_by = \"first_variable\",   col_vector_flow = palette_qualitative() %>% palette_filter(greys = F),   col_vector_value = RColorBrewer::brewer.pal(9, \"Greys\")[c(4, 7, 5, 8, 6)],   colorful_fill_variable_stratum = T,   verbose = F,   stratum_labels = T,   stratum_label_type = \"label\",   stratum_label_size = 4.5,   stratum_width = 1/4,   auto_rotate_xlabs = T,   ... )"},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"alluvial plot of data in wide format — alluvial_wide","text":"data dataframe id unquoted column name id column character vector id column name max_variables maximum number variables, Default: 20 bins number bins numerical variables, Default: 5 bin_labels labels bins low high, Default: c(\"LL\", \"ML\", \"M\", \"MH\", \"HH\") NA_label character vector, define label missing data, Default: 'NA' order_levels character vector denoting levels reordered low high fill_by one_of(c('first_variable', 'last_variable', 'all_flows', 'values')), Default: 'first_variable' col_vector_flow HEX colors flows, Default: palette_filter( greys = F) col_vector_value Hex colors y levels/values, Default: RColorBrewer::brewer.pal(9, \"Greys\")[c(3, 6, 4, 7, 5)] colorful_fill_variable_stratum logical, use flow colors colorize fill variable stratum, Default: TRUE verbose logical, print plot summary, Default: F stratum_labels logical, Default: TRUE stratum_label_type character, Default: \"label\" stratum_label_size numeric, Default: 4.5 stratum_width double, Default: 1/4 auto_rotate_xlabs logical, Default: TRUE ... additional arguments passed manip_bin_numerics","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"alluvial plot of data in wide format — alluvial_wide","text":"ggplot2 object","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_wide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"alluvial plot of data in wide format — alluvial_wide","text":"hood function converts wide format long  format. ggalluvial also offers way make alluvial plots directly  wide format tables allow individual colouring stratum  segments. tradeoff can order levels whole  individually variable, Thus variables levels  name order . want change level order  independently assign unique level names first.","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/alluvial_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"alluvial plot of data in wide format — alluvial_wide","text":"","code":"if (FALSE) { # \\dontrun{ alluvial_wide( data = mtcars2, id = ids                 , max_variables = 3                 , fill_by = 'first_variable' )#' # more coloring variants---------------------- alluvial_wide( data = mtcars2, id = ids                 , max_variables = 5                 , fill_by = 'last_variable' )  alluvial_wide( data = mtcars2, id = ids                 , max_variables = 5                 , fill_by = 'all_flows' )  alluvial_wide( data = mtcars2, id = ids                 , max_variables = 5                 , fill_by = 'first_variable' )  # manually order variable values and colour by stratum value  alluvial_wide( data = mtcars2, id = ids                  , max_variables = 5                  , fill_by = 'values'                  , order_levels = c('4', '8', '6') ) } # }"},{"path":"https://erblast.github.io/easyalluvial/reference/check_pkg_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"check if package is installed — check_pkg_installed","title":"check if package is installed — check_pkg_installed","text":"check package installed","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/check_pkg_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check if package is installed — check_pkg_installed","text":"","code":"check_pkg_installed(pkg, raise_error = TRUE)"},{"path":"https://erblast.github.io/easyalluvial/reference/check_pkg_installed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check if package is installed — check_pkg_installed","text":"pkg character, package name raise_error logical","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/check_pkg_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check if package is installed — check_pkg_installed","text":"logical","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/check_pkg_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"check if package is installed — check_pkg_installed","text":"","code":"check_pkg_installed(\"easyalluvial\") #> [1] TRUE"},{"path":"https://erblast.github.io/easyalluvial/reference/get_data_space.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate data space — get_data_space","title":"calculate data space — get_data_space","text":"calculates dataspace based modeling dataframe  importance explanatory variables. considers  important variables defined degree parameter. selects number  (defined bins) sensible single values spread range  numeric variables creates possible value combinations among  important variables. values remaining variables set  mode(factors) median(numerics).","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/get_data_space.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate data space — get_data_space","text":"","code":"get_data_space(df, imp, degree = 4, bins = 5, max_levels = 10)"},{"path":"https://erblast.github.io/easyalluvial/reference/get_data_space.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate data space — get_data_space","text":"df dataframe, training data imp dataframe, two columns one numeric containing importance measures one character factor column containing corresponding variable names found training data. degree integer,  number top important variables select. plotting 4 result two many flows alluvial plot readable, Default: 4 bins integer, number bins numeric variables, maximum number levels factor variables, increasing number might result many flows, Default: 5 max_levels integer, maximum number levels per factor variable, Default: 10","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/get_data_space.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculate data space — get_data_space","text":"data frame","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/get_data_space.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"calculate data space — get_data_space","text":"selects top important variables based degree  parameter bins numeric variables using  manip_bin_numerics, leaving categoric  variables unchanged. number bins numeric variable set  bins -2. Next median picked bins min  max value added numeric variable get (median(bin) X  bins -2, max, min) numeric variable. possible combinations  values  categoric factor levels created. total  number possible combinations defines range data space.  values remaining variables set mode(factors)  median(numerics). model visualisation approach follows \"visualising model  dataspace\" principle described Wickham H, Cook D, Hofmann H  (2015) Visualizing statistical models: Removing blindfold. Statistical  Analysis Data Mining 8(4) <doi:10.1002/sam.11271>","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/get_data_space.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculate data space — get_data_space","text":"","code":"df = mtcars2[, ! names(mtcars2) %in% 'ids' ] m = randomForest::randomForest( disp ~ ., df) imp = m$importance dspace = get_data_space(df, imp)"},{"path":"https://erblast.github.io/easyalluvial/reference/get_pdp_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"get predictions compatible with the partial dependence plotting method — get_pdp_predictions","title":"get predictions compatible with the partial dependence plotting method — get_pdp_predictions","text":"Alluvial plots capable displaying higher dimensional data  plane, thus lend plot response statistical model  changes input data across multiple dimensions. practical limit  4 dimensions conventional partial dependence plots limited  2 dimensions. Briefly 4 variables highest feature importance given  model selected 5 values spread variable range selected  . grid possible combinations created.  none-plotted variables set values found first row  training data set. Using artificial data space model predictions  generated. process repeated row training  data set overall model response averaged end.  possible combinations plotted flow coloured bin  corresponding average model response generated particular  combination.","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/get_pdp_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get predictions compatible with the partial dependence plotting method — get_pdp_predictions","text":"","code":"get_pdp_predictions(   df,   imp,   m,   degree = 4,   bins = 5,   .f_predict = predict,   parallel = FALSE )"},{"path":"https://erblast.github.io/easyalluvial/reference/get_pdp_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get predictions compatible with the partial dependence plotting method — get_pdp_predictions","text":"df dataframe, training data imp dataframe, two columns one numeric containing importance measures one character factor column containing corresponding variable names found training data. m model object degree integer,  number top important variables select. plotting 4 result two many flows alluvial plot readable, Default: 4 bins integer, number bins numeric variables, increasing number might result many flows, Default: 5 .f_predict corresponding model predict() function. Needs accept `m` first parameter use `newdata` parameter. Supply wrapper predict functions x-y syntax. parallel processing predict method object classes always get imported correctly worker environment. can pass correct predict method via parameter example randomForest:::predict.randomForest. Note lot modeling packages export predict method explicitly can found using :::. parallel logical, turn parallel processing. Default: FALSE","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/get_pdp_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get predictions compatible with the partial dependence plotting method — get_pdp_predictions","text":"vector, predictions","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/get_pdp_predictions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get predictions compatible with the partial dependence plotting method — get_pdp_predictions","text":"partial dependency plots see  [https://christophm.github.io/interpretable-ml-book/pdp.html].","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/get_pdp_predictions.html","id":"parallel-processing","dir":"Reference","previous_headings":"","what":"Parallel Processing","title":"get predictions compatible with the partial dependence plotting method — get_pdp_predictions","text":"using `furrr` `future` package paralelize  computational steps calculating predictions. user  register compatible backend (see plan).","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/get_pdp_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get predictions compatible with the partial dependence plotting method — get_pdp_predictions","text":"","code":"df = mtcars2[, ! names(mtcars2) %in% 'ids' ]  m = randomForest::randomForest( disp ~ ., df)  imp = m$importance   pred = get_pdp_predictions(df, imp                             , m                             , degree = 3                             , bins = 5) #> Getting partial dependence plot preditions. This can take a while. See easyalluvial::get_pdp_predictions() `Details` on how to use multiprocessing  # parallel processing -------------------------- if (FALSE) { # \\dontrun{  future::plan(\"multisession\")    # note that we have to pass the predict method via .f_predict otherwise  # it will not be available in the worker's environment.    pred = get_pdp_predictions(df, imp                             , m                             , degree = 3                             , bins = 5,                             , parallel = TRUE                             , .f_predict = randomForest:::predict.randomForest) } # }"},{"path":"https://erblast.github.io/easyalluvial/reference/get_pdp_predictions_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"get predictions compatible with the partial dependence plotting method, sequential variant that only works for numeric predictions. — get_pdp_predictions_seq","title":"get predictions compatible with the partial dependence plotting method, sequential variant that only works for numeric predictions. — get_pdp_predictions_seq","text":"replaced pdp_predictions can paralelized also handles factor predictions. still used test results.","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/get_pdp_predictions_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get predictions compatible with the partial dependence plotting method, sequential variant that only works for numeric predictions. — get_pdp_predictions_seq","text":"","code":"get_pdp_predictions_seq(df, imp, m, degree = 4, bins = 5, .f_predict = predict)"},{"path":"https://erblast.github.io/easyalluvial/reference/get_pdp_predictions_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get predictions compatible with the partial dependence plotting method, sequential variant that only works for numeric predictions. — get_pdp_predictions_seq","text":"df dataframe, training data imp dataframe, two columns one numeric containing importance measures one character factor column containing corresponding variable names found training data. m model object degree integer,  number top important variables select. plotting 4 result two many flows alluvial plot readable, Default: 4 bins integer, number bins numeric variables, increasing number might result many flows, Default: 5 .f_predict corresponding model predict() function. Needs accept `m` first parameter use `newdata` parameter. Supply wrapper predict functions x-y syntax. parallel processing predict method object classes always get imported correctly worker environment. can pass correct predict method via parameter example randomForest:::predict.randomForest. Note lot modeling packages export predict method explicitly can found using :::.","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/manip_bin_numerics.html","id":null,"dir":"Reference","previous_headings":"","what":"bin numerical columns — manip_bin_numerics","title":"bin numerical columns — manip_bin_numerics","text":"centers, scales Yeo Johnson transforms numeric variables   dataframe binning n bins equal range. Outliers based   boxplot stats capped (set min max boxplot stats).","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/manip_bin_numerics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bin numerical columns — manip_bin_numerics","text":"","code":"manip_bin_numerics(   x,   bins = 5,   bin_labels = c(\"LL\", \"ML\", \"M\", \"MH\", \"HH\"),   center = T,   scale = T,   transform = T,   round_numeric = T,   digits = 2,   NA_label = \"NA\" )"},{"path":"https://erblast.github.io/easyalluvial/reference/manip_bin_numerics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bin numerical columns — manip_bin_numerics","text":"x dataframe numeric variables, numeric vector bins number bins numerical variables, passed cut breaks parameter, Default: 5 bin_labels labels bins low high, Default: c(\"LL\", \"ML\", \"M\", \"MH\", \"HH\"). Can also one c('mean', 'median', 'min_max', 'cuts'), corresponding summary function supply labels. center logical, Default: T scale logical, Default: T transform logical, apply Yeo Johnson Transformation, Default: T round_numeric, logical, rounds numeric results bin_labels supplied supported summary function name. digits, integer, number digits round NA_label character vector, define label missing data, Default: 'NA'","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/manip_bin_numerics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bin numerical columns — manip_bin_numerics","text":"dataframe","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/manip_bin_numerics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bin numerical columns — manip_bin_numerics","text":"","code":"summary( mtcars2 ) #>       mpg        cyl         disp             hp             drat       #>  Min.   :10.40   4:11   Min.   : 71.1   Min.   : 52.0   Min.   :2.760   #>  1st Qu.:15.43   6: 7   1st Qu.:120.8   1st Qu.: 96.5   1st Qu.:3.080   #>  Median :19.20   8:14   Median :196.3   Median :123.0   Median :3.695   #>  Mean   :20.09          Mean   :230.7   Mean   :146.7   Mean   :3.597   #>  3rd Qu.:22.80          3rd Qu.:326.0   3rd Qu.:180.0   3rd Qu.:3.920   #>  Max.   :33.90          Max.   :472.0   Max.   :335.0   Max.   :4.930   #>        wt             qsec       vs             am     gear   carb   #>  Min.   :1.513   Min.   :14.50   V:18   automatic:19   3:15   1: 7   #>  1st Qu.:2.581   1st Qu.:16.89   S:14   manual   :13   4:12   2:10   #>  Median :3.325   Median :17.71                         5: 5   3: 3   #>  Mean   :3.217   Mean   :17.85                                4:10   #>  3rd Qu.:3.610   3rd Qu.:18.90                                6: 1   #>  Max.   :5.424   Max.   :22.90                                8: 1   #>      ids            #>  Length:32          #>  Class :character   #>  Mode  :character   #>                     #>                     #>                     summary( manip_bin_numerics(mtcars2) ) #>  mpg    cyl    disp     hp     drat     wt     qsec    vs             am     #>  LL:3   4:11   LL: 9   LL: 5   LL: 9   LL: 5   LL: 4   V:18   automatic:19   #>  ML:8   6: 7   ML: 7   ML:10   ML: 4   ML: 6   ML: 2   S:14   manual   :13   #>  M :9   8:14   M : 2   M : 4   M :12   M :13   M :10                         #>  MH:7          MH:10   MH: 9   MH: 6   MH: 5   MH: 7                         #>  HH:5          HH: 4   HH: 4   HH: 1   HH: 3   HH: 9                         #>                                                                              #>  gear   carb       ids            #>  3:15   1: 7   Length:32          #>  4:12   2:10   Class :character   #>  5: 5   3: 3   Mode  :character   #>         4:10                      #>         6: 1                      #>         8: 1                      summary( manip_bin_numerics(mtcars2, bin_labels = 'mean')) #>     mpg    cyl        disp         hp       drat       wt        qsec    vs     #>  11.37:3   4:11   96.56 : 9   62.2  : 5   2.98: 9   1.81: 5   15   : 4   V:18   #>  15.26:8   6: 7   155.39: 7   103.3 :10   3.18: 4   2.53: 6   16.15: 2   S:14   #>  19.11:9   8:14   241.5 : 2   136.5 : 4   3.79:12   3.34:13   17.13:10          #>  22.9 :7          317.14:10   190.56: 9   4.19: 6   3.85: 5   18.26: 7          #>  30.88:5          443   : 4   272.25: 4   4.93: 1   5.34: 3   19.97: 9          #>                                                                                 #>          am     gear   carb       ids            #>  automatic:19   3:15   1: 7   Length:32          #>  manual   :13   4:12   2:10   Class :character   #>                 5: 5   3: 3   Mode  :character   #>                        4:10                      #>                        6: 1                      #>                        8: 1                      summary( manip_bin_numerics(mtcars2, bin_labels = 'cuts'   , scale = FALSE, center = FALSE, transform = FALSE)) #>           mpg     cyl            disp              hp              drat    #>  (10.4,15.1]: 6   4:11   (70.7,151]:12   (51.8,94.4]: 7   (2.76,3.19]:11   #>  (15.1,19.8]:12   6: 7   (151,231] : 5   (94.4,137] :10   (3.19,3.63]: 4   #>  (19.8,24.5]: 8   8:14   (231,312] : 6   (137,179]  : 5   (3.63,4.06]:10   #>  (24.5,29.2]: 2          (312,392] : 5   (179,222]  : 5   (4.06,4.5] : 6   #>  (29.2,33.9]: 4          (392,472] : 4   (222,264]  : 5   (4.5,4.93] : 1   #>                                                                            #>            wt              qsec    vs             am     gear   carb   #>  (1.51,2.26]: 6   (14.5,15.6]: 4   V:18   automatic:19   3:15   1: 7   #>  (2.26,3.01]: 6   (15.6,16.8]: 3   S:14   manual   :13   4:12   2:10   #>  (3.01,3.76]:13   (16.8,17.9]:10                         5: 5   3: 3   #>  (3.76,4.5] : 4   (17.9,19.1]: 8                                4:10   #>  (4.5,5.25] : 3   (19.1,20.2]: 7                                6: 1   #>                                                                 8: 1   #>      ids            #>  Length:32          #>  Class :character   #>  Mode  :character   #>                     #>                     #>"},{"path":"https://erblast.github.io/easyalluvial/reference/manip_factor_2_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"converts factor to numeric preserving numeric levels and order in character levels. — manip_factor_2_numeric","title":"converts factor to numeric preserving numeric levels and order in character levels. — manip_factor_2_numeric","text":"converting check whether levels contain number,   number preserved.","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/manip_factor_2_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"converts factor to numeric preserving numeric levels and order in character levels. — manip_factor_2_numeric","text":"","code":"manip_factor_2_numeric(vec)"},{"path":"https://erblast.github.io/easyalluvial/reference/manip_factor_2_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"converts factor to numeric preserving numeric levels and order in character levels. — manip_factor_2_numeric","text":"vec vector","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/manip_factor_2_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"converts factor to numeric preserving numeric levels and order in character levels. — manip_factor_2_numeric","text":"vector","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/manip_factor_2_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"converts factor to numeric preserving numeric levels and order in character levels. — manip_factor_2_numeric","text":"","code":"fac_num = factor( c(1,3,8) ) fac_chr = factor( c('foo','bar') ) fac_chr_ordered = factor( c('a','b','c'), ordered = TRUE )  manip_factor_2_numeric( fac_num ) #> [1] 1 3 8 manip_factor_2_numeric( fac_chr ) #> [1] 2 1 manip_factor_2_numeric( fac_chr_ordered ) #> [1] 1 2 3 # does not work for decimal numbers manip_factor_2_numeric(factor(c(\"A12\", \"B55\", \"10e4\"))) #> [1] 2 3 1 manip_factor_2_numeric(factor(c(\"1.56\", \"4.56\", \"8.4\"))) #> [1] 1 2 3"},{"path":"https://erblast.github.io/easyalluvial/reference/manip_get_ggplot_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ggplot data — manip_get_ggplot_data","title":"Get ggplot data — manip_get_ggplot_data","text":"retrieve ggplot 2 plot data S3 S7 (>= ggplot2 v4.0)","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/manip_get_ggplot_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ggplot data — manip_get_ggplot_data","text":"","code":"manip_get_ggplot_data(p)"},{"path":"https://erblast.github.io/easyalluvial/reference/manip_get_ggplot_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ggplot data — manip_get_ggplot_data","text":"p ggplot object","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/mtcars2.html","id":null,"dir":"Reference","previous_headings":"","what":"mtcars dataset with cyl, vs, am ,gear, carb as factor variables and car model names as id — mtcars2","title":"mtcars dataset with cyl, vs, am ,gear, carb as factor variables and car model names as id — mtcars2","text":"mtcars dataset cyl, vs, ,gear, carb factor variables car model names id","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/mtcars2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mtcars dataset with cyl, vs, am ,gear, carb as factor variables and car model names as id — mtcars2","text":"","code":"mtcars2"},{"path":"https://erblast.github.io/easyalluvial/reference/mtcars2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"mtcars dataset with cyl, vs, am ,gear, carb as factor variables and car model names as id — mtcars2","text":"data frame 32 rows 12 variables mpg Miles/(US) gallon cyl Number cylinders disp Displacement (cu..) hp Gross horsepower drat Rear axle ratio wt Weight (1000 lbs) qsec 1/4 mile time vs Engine Transmission gear Number forward gears carb Number carburetors ids car model name","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/mtcars2.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"mtcars dataset with cyl, vs, am ,gear, carb as factor variables and car model names as id — mtcars2","text":"datasets","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/palette_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"color filters for any vector of hex color values — palette_filter","title":"color filters for any vector of hex color values — palette_filter","text":"filters based rgb values","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/palette_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"color filters for any vector of hex color values — palette_filter","text":"","code":"palette_filter(   palette = palette_qualitative(),   similar = F,   greys = T,   reds = T,   greens = T,   blues = T,   dark = T,   medium = T,   bright = T,   thresh_similar = 25 )"},{"path":"https://erblast.github.io/easyalluvial/reference/palette_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"color filters for any vector of hex color values — palette_filter","text":"palette vector hex color values, Default: palette_qualitative() similar, logical, allow similar colours, similar colours detected using threshold (thresh_similar), two colours similar value RGB within threshold range corresponding RGB value second colour, Default: F greys, logical, allow grey colours, blue == green == blue , Default: T reds, logical, allow red colours, blue < 50 & green < 50  & red > 200 , Default: T greens, logical, allow green colours, green > red & green > blue, Default: T blues, logical, allow blue colours, blue > green & green > red, Default: T dark, logical, allow colours dark intensity, sum( red, green, blue) < 420 , Default: T medium, logical, allow colours medium intensity, ( sum( red, green, blue), 420, 600) , Default: T bright, logical, allow colours bright intensity, sum( red, green, blue) > 600, Default: T thresh_similar, int, threshold defining similar colours, see similar, Default: 25","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/palette_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"color filters for any vector of hex color values — palette_filter","text":"vector hex colors","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/palette_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"color filters for any vector of hex color values — palette_filter","text":"","code":"require(magrittr) #> Loading required package: magrittr  palette_qualitative() %>%   palette_filter(thresh_similar = 0) %>%   palette_plot_intensity()   if (FALSE) { # \\dontrun{ # more examples---------------------------  palette_qualitative() %>%   palette_filter(thresh_similar = 25) %>%   palette_plot_intensity()  palette_qualitative() %>%   palette_filter(thresh_similar = 0, blues = FALSE) %>%   palette_plot_intensity() } # }"},{"path":"https://erblast.github.io/easyalluvial/reference/palette_increase_length.html","id":null,"dir":"Reference","previous_headings":"","what":"increases length of palette by repeating colours — palette_increase_length","title":"increases length of palette by repeating colours — palette_increase_length","text":"works vector","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/palette_increase_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"increases length of palette by repeating colours — palette_increase_length","text":"","code":"palette_increase_length(palette = palette_qualitative(), n = 100)"},{"path":"https://erblast.github.io/easyalluvial/reference/palette_increase_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"increases length of palette by repeating colours — palette_increase_length","text":"palette vector, Default: palette_qualitative() n, int, length, Default: 100","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/palette_increase_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"increases length of palette by repeating colours — palette_increase_length","text":"vector increased length","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/palette_increase_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"increases length of palette by repeating colours — palette_increase_length","text":"","code":"require(magrittr)  length(palette_qualitative()) #> [1] 77  palette_qualitative() %>%   palette_increase_length(100) %>%   length() #> [1] 100"},{"path":"https://erblast.github.io/easyalluvial/reference/palette_plot_intensity.html","id":null,"dir":"Reference","previous_headings":"","what":"plot colour intensity of palette — palette_plot_intensity","title":"plot colour intensity of palette — palette_plot_intensity","text":"sum red green blue values","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/palette_plot_intensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot colour intensity of palette — palette_plot_intensity","text":"","code":"palette_plot_intensity(palette)"},{"path":"https://erblast.github.io/easyalluvial/reference/palette_plot_intensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot colour intensity of palette — palette_plot_intensity","text":"palette vector containing color hex values","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/palette_plot_intensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot colour intensity of palette — palette_plot_intensity","text":"ggplot2 plot","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/palette_plot_intensity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot colour intensity of palette — palette_plot_intensity","text":"","code":"if (FALSE) { # \\dontrun{ if(interactive()){ palette_qualitative() %>%   palette_filter( thresh = 25) %>%   palette_plot_intensity()  } } # }"},{"path":"https://erblast.github.io/easyalluvial/reference/palette_plot_rgp.html","id":null,"dir":"Reference","previous_headings":"","what":"plot rgb values of palette — palette_plot_rgp","title":"plot rgb values of palette — palette_plot_rgp","text":"grouped bar chart","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/palette_plot_rgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot rgb values of palette — palette_plot_rgp","text":"","code":"palette_plot_rgp(palette)"},{"path":"https://erblast.github.io/easyalluvial/reference/palette_plot_rgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot rgb values of palette — palette_plot_rgp","text":"palette vector containing color hex values","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/palette_plot_rgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot rgb values of palette — palette_plot_rgp","text":"ggplot2 plot","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/palette_plot_rgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot rgb values of palette — palette_plot_rgp","text":"","code":"if (FALSE) { # \\dontrun{ if(interactive()){ palette_qualitative() %>%   palette_filter( thresh = 50) %>%   palette_plot_rgp()  } } # }"},{"path":"https://erblast.github.io/easyalluvial/reference/palette_qualitative.html","id":null,"dir":"Reference","previous_headings":"","what":"compose palette from qualitative RColorBrewer palettes — palette_qualitative","title":"compose palette from qualitative RColorBrewer palettes — palette_qualitative","text":"uses c('#FF0065','#009850', '#A56F2B', '#005EAA', '#710500', '#7B5380', '#9DD1D1') adds unique values found qualitative RColorBrewer palettes","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/palette_qualitative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compose palette from qualitative RColorBrewer palettes — palette_qualitative","text":"","code":"palette_qualitative()"},{"path":"https://erblast.github.io/easyalluvial/reference/palette_qualitative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compose palette from qualitative RColorBrewer palettes — palette_qualitative","text":"vector hex values","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/palette_qualitative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compose palette from qualitative RColorBrewer palettes — palette_qualitative","text":"","code":"palette_qualitative() #>  [1] \"#FF0065\" \"#009850\" \"#A56F2B\" \"#005EAA\" \"#710500\" \"#7B5380\" \"#9DD1D1\" #>  [8] \"#7FC97F\" \"#BEAED4\" \"#FDC086\" \"#FFFF99\" \"#386CB0\" \"#F0027F\" \"#BF5B17\" #> [15] \"#666666\" \"#1B9E77\" \"#D95F02\" \"#7570B3\" \"#E7298A\" \"#66A61E\" \"#E6AB02\" #> [22] \"#A6761D\" \"#A6CEE3\" \"#1F78B4\" \"#B2DF8A\" \"#33A02C\" \"#FB9A99\" \"#E31A1C\" #> [29] \"#FDBF6F\" \"#FF7F00\" \"#CAB2D6\" \"#6A3D9A\" \"#B15928\" \"#FBB4AE\" \"#B3CDE3\" #> [36] \"#CCEBC5\" \"#DECBE4\" \"#FED9A6\" \"#FFFFCC\" \"#E5D8BD\" \"#FDDAEC\" \"#F2F2F2\" #> [43] \"#B3E2CD\" \"#FDCDAC\" \"#CBD5E8\" \"#F4CAE4\" \"#E6F5C9\" \"#FFF2AE\" \"#F1E2CC\" #> [50] \"#CCCCCC\" \"#E41A1C\" \"#377EB8\" \"#4DAF4A\" \"#984EA3\" \"#FFFF33\" \"#A65628\" #> [57] \"#F781BF\" \"#999999\" \"#66C2A5\" \"#FC8D62\" \"#8DA0CB\" \"#E78AC3\" \"#A6D854\" #> [64] \"#FFD92F\" \"#E5C494\" \"#B3B3B3\" \"#8DD3C7\" \"#FFFFB3\" \"#BEBADA\" \"#FB8072\" #> [71] \"#80B1D3\" \"#FDB462\" \"#B3DE69\" \"#FCCDE5\" \"#D9D9D9\" \"#BC80BD\" \"#FFED6F\""},{"path":"https://erblast.github.io/easyalluvial/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://erblast.github.io/easyalluvial/reference/plot_all_hists.html","id":null,"dir":"Reference","previous_headings":"","what":"plot marginal histograms of alluvial plot — plot_all_hists","title":"plot marginal histograms of alluvial plot — plot_all_hists","text":"create gtable density histograms frequency plots   variables given alluvial plot.","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/plot_all_hists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot marginal histograms of alluvial plot — plot_all_hists","text":"","code":"plot_all_hists(p, data_input, top = TRUE, keep_labels = FALSE, ...)"},{"path":"https://erblast.github.io/easyalluvial/reference/plot_all_hists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot marginal histograms of alluvial plot — plot_all_hists","text":"p alluvial plot data_input dataframe, input data used create dataframe top logical, position histograms, FALSE adds bottom, Default: TRUE keep_labels logical, keep title caption, Default: FALSE ... additional arguments specific alluvial plot types: pred_train can used pass training predictions model response alluvials","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/plot_all_hists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot marginal histograms of alluvial plot — plot_all_hists","text":"gtable","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/plot_all_hists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot marginal histograms of alluvial plot — plot_all_hists","text":"","code":"if (FALSE) { # \\dontrun{ p = alluvial_wide(mtcars2, max_variables = 3) plot_all_hists(p, mtcars2) } # }"},{"path":"https://erblast.github.io/easyalluvial/reference/plot_condensation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot dataframe condensation potential — plot_condensation","title":"Plot dataframe condensation potential — plot_condensation","text":"plotting condensation potential meant decision aid   variables include alluvial plot. variables   transformed categoric variables two variables selected   dataframe grouped summarized . pair   results greatest condensation original dataframe selected.   next variable offers greatest condensation potential   chosen variables added. condensation percent   plotted step along number groups (flows)   dataframe. experience advisable 1500 flows   alluvial plot take long time render.   particular variable interest dataframe variable can   chosen starting variable.","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/plot_condensation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot dataframe condensation potential — plot_condensation","text":"","code":"plot_condensation(df, first = NULL)"},{"path":"https://erblast.github.io/easyalluvial/reference/plot_condensation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot dataframe condensation potential — plot_condensation","text":"df dataframe first unquoted expression string denoting first variable picked condensation, Default: NULL","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/plot_condensation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot dataframe condensation potential — plot_condensation","text":"ggplot2 plot","code":""},{"path":[]},{"path":"https://erblast.github.io/easyalluvial/reference/plot_condensation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot dataframe condensation potential — plot_condensation","text":"","code":"plot_condensation(mtcars2)    plot_condensation(mtcars2, first = 'disp')"},{"path":"https://erblast.github.io/easyalluvial/reference/plot_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"plot histogram of alluvial plot variable — plot_hist","title":"plot histogram of alluvial plot variable — plot_hist","text":"helper function used add_marginal_histograms","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/plot_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot histogram of alluvial plot variable — plot_hist","text":"","code":"plot_hist(var, p, data_input, ...)"},{"path":"https://erblast.github.io/easyalluvial/reference/plot_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot histogram of alluvial plot variable — plot_hist","text":"var character vector, variable name p alluvial plot data_input dataframe used create alluvial plot ... additional arguments specific alluvial plot types: pred_train can used pass training predictions model response alluvials","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/plot_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot histogram of alluvial plot variable — plot_hist","text":"ggplot object","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/plot_imp.html","id":null,"dir":"Reference","previous_headings":"","what":"plot feature importance — plot_imp","title":"plot feature importance — plot_imp","text":"plot important features model response alluvial bars","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/plot_imp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot feature importance — plot_imp","text":"","code":"plot_imp(p, data_input, truncate_at = 50, color = \"darkgrey\")"},{"path":"https://erblast.github.io/easyalluvial/reference/plot_imp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot feature importance — plot_imp","text":"p alluvial plot data_input dataframe used generate alluvial plot truncate_at integer, limit number features value, Default: 50 color character vector, Default: 'darkgrey'","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/plot_imp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot feature importance — plot_imp","text":"ggplot object","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/plot_imp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot feature importance — plot_imp","text":"","code":"if (FALSE) { # \\dontrun{ df = mtcars2[, ! names(mtcars2) %in% 'ids' ]  train = caret::train( disp ~ .                      , df                      , method = 'rf'                      , trControl = caret::trainControl( method = 'none' )                      , importance = TRUE )  pred_train = caret::predict.train(train, df)  p = alluvial_model_response_caret(train, degree = 3, pred_train = pred_train)  plot_imp(p, mtcars2)  } # }"},{"path":"https://erblast.github.io/easyalluvial/reference/quarterly_flights.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarterly mean arrival delay times for a set of 402 flights — quarterly_flights","title":"Quarterly mean arrival delay times for a set of 402 flights — quarterly_flights","text":"Created nycflights13::flights","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/quarterly_flights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarterly mean arrival delay times for a set of 402 flights — quarterly_flights","text":"","code":"quarterly_flights"},{"path":"https://erblast.github.io/easyalluvial/reference/quarterly_flights.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Quarterly mean arrival delay times for a set of 402 flights — quarterly_flights","text":"data frame 1608 rows 6 variables tailnum unique identifier created tailnum, origin, destination carrier carrier carrier code origin origin code dest destination code qu quarter mean_arr_delay average delay arrival either on_time late","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/quarterly_flights.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Quarterly mean arrival delay times for a set of 402 flights — quarterly_flights","text":"nycflights13::flights","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/quarterly_sunspots.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarterly mean relative sunspots number from 1749-1983 — quarterly_sunspots","title":"Quarterly mean relative sunspots number from 1749-1983 — quarterly_sunspots","text":"Quarterly mean relative sunspots number 1749-1983","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/quarterly_sunspots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarterly mean relative sunspots number from 1749-1983 — quarterly_sunspots","text":"","code":"quarterly_sunspots"},{"path":"https://erblast.github.io/easyalluvial/reference/quarterly_sunspots.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Quarterly mean relative sunspots number from 1749-1983 — quarterly_sunspots","text":"data frame 940 rows 4 variables year  qu quarter spots total number sunspots mean_spots_per_year","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/quarterly_sunspots.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Quarterly mean relative sunspots number from 1749-1983 — quarterly_sunspots","text":"Andrews, D. F. Herzberg, . M. (1985) Data: Collection Problems Many Fields Student Research Worker. New York: Springer-Verlag.","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/tidy_imp.html","id":null,"dir":"Reference","previous_headings":"","what":"tidy up dataframe containing model feature importance — tidy_imp","title":"tidy up dataframe containing model feature importance — tidy_imp","text":"returns dataframe exactly two columns, vars imp   aggregates dummy encoded variables. Helper function called functions   take imp parameter. Can called manually formula   aggregating dummy encoded variables must modified.","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/tidy_imp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tidy up dataframe containing model feature importance — tidy_imp","text":"","code":"tidy_imp(imp, df, .f = max, resp_var = NULL)"},{"path":"https://erblast.github.io/easyalluvial/reference/tidy_imp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tidy up dataframe containing model feature importance — tidy_imp","text":"imp dataframe matrix feature importance information df dataframe, modeling training data .f window function, Default: max resp_var character, prediction variable, can usually inferred imp df. work models needs specified cases.","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/tidy_imp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tidy up dataframe containing model feature importance — tidy_imp","text":"dataframe vars character column feature names imp numerical column, importance values","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/tidy_imp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tidy up dataframe containing model feature importance — tidy_imp","text":"","code":"# randomforest df = mtcars2[, ! names(mtcars2) %in% 'ids' ] m = randomForest::randomForest( disp ~ ., df) imp = m$importance tidy_imp(imp, df) #> # A tibble: 10 × 2 #>    vars     imp #>    <chr>  <dbl> #>  1 cyl   96402. #>  2 mpg   89923. #>  3 hp    77633. #>  4 wt    71970. #>  5 drat  46440. #>  6 gear  21548. #>  7 qsec  20524. #>  8 vs    15734. #>  9 carb   8570. #> 10 am     5091."},{"path":"https://erblast.github.io/easyalluvial/reference/titanic.html","id":null,"dir":"Reference","previous_headings":"","what":"titanic data set' — titanic","title":"titanic data set' — titanic","text":"titanic data set'","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/titanic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"titanic data set' — titanic","text":"","code":"titanic"},{"path":"https://erblast.github.io/easyalluvial/reference/titanic.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"titanic data set' — titanic","text":"data frame 891 rows 10 variables Survived Survived Pclass Pclass Sex Sex Age Age SibSp SibSp Parch Parch Fare Fare Cabin Cabin Embarked Embarked title title","code":""},{"path":"https://erblast.github.io/easyalluvial/reference/titanic.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"titanic data set' — titanic","text":"datasets","code":""},{"path":"https://erblast.github.io/easyalluvial/news/index.html","id":"version-040-20250825","dir":"Changelog","previous_headings":"","what":"Version 0.4.0 20250825","title":"Version 0.4.0 20250825","text":"adapted changes ggplot2 v4.0.0","code":""},{"path":"https://erblast.github.io/easyalluvial/news/index.html","id":"version-032-submitted-to-cran-20231207","dir":"Changelog","previous_headings":"","what":"Version 0.3.2 submitted to CRAN 20231207","title":"Version 0.3.2 submitted to CRAN 20231207","text":"CRAN release: 2023-12-07 check vip pkg installation executing example alluvial_model_response_parsnip option using geom_text instead geom_label (https://github.com/gernophil)","code":""},{"path":"https://erblast.github.io/easyalluvial/news/index.html","id":"version-031-submitted-to-cran-20220704","dir":"Changelog","previous_headings":"","what":"Version 0.3.1 submitted to CRAN 20220704","title":"Version 0.3.1 submitted to CRAN 20220704","text":"CRAN release: 2022-07-05 cleanup package dependencies","code":""},{"path":"https://erblast.github.io/easyalluvial/news/index.html","id":"version-030-submitted-to-cran-20200111","dir":"Changelog","previous_headings":"","what":"Version 0.3.0 submitted to CRAN 20200111","title":"Version 0.3.0 submitted to CRAN 20200111","text":"CRAN release: 2021-01-13 moved modeling packages vdiffr imports suggests added parsnip workflows wrapper Bug Fixes: - alluvial_wide() now works columns character columns","code":""},{"path":"https://erblast.github.io/easyalluvial/news/index.html","id":"version-023-submitted-to-cran","dir":"Changelog","previous_headings":"","what":"Version 0.2.3 submitted to CRAN","title":"Version 0.2.3 submitted to CRAN","text":"CRAN release: 2020-05-07 Bug Fixes: - compatibility dplyr 1.0.0 New features: - pkgdown website","code":""},{"path":"https://erblast.github.io/easyalluvial/news/index.html","id":"version-021-submitted-to-cran-20190917","dir":"Changelog","previous_headings":"","what":"Version 0.2.1 submitted to CRAN 20190917","title":"Version 0.2.1 submitted to CRAN 20190917","text":"CRAN release: 2019-09-17 Bug Fixes: - compatibility tidyr 1.0.0 - compatibility ggalluvial 0.10.0 - alluvial_model_response() issues factors https://github.com/erblast/easyalluvial/issues/13 now fixed","code":""},{"path":"https://erblast.github.io/easyalluvial/news/index.html","id":"version-020-submitted-to-cran-20190331","dir":"Changelog","previous_headings":"","what":"Version 0.2.0 submitted to CRAN 20190331","title":"Version 0.2.0 submitted to CRAN 20190331","text":"CRAN release: 2019-04-01 Minor changes: - Default plotting colours improved - alluvial_wide() stratum fill color variable determining flow now matched flow color - parameter_label_size allows adjust label fint size, result label size slightly increased New features: - marginal histograms - alluvial flavoured partial dependency model response alluvial plots - new datasets mtcars2, quarterly_sunspots Bug Fixes: - Compatibility recipes 0.1.5 - NA values numerical columns excepted - correct ggplot2 ggalluvial versions added dependencies - p$data_key contain columns empty levels anymore - better support numerical variables alluvial_long()","code":""}]
